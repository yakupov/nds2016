package ru.itmo.ppsn;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import ru.itmo.nds.IncrementalPPSN;
import ru.itmo.nds.PPSN2014;
import ru.itmo.nds.util.RankedPopulation;

public class IncrementalStupidPerformanceTest {
    private final IncrementalPPSN incrementalPPSN = new IncrementalPPSN();
    private final PPSN2014 ppsn2014 = new PPSN2014();

    private final double[][] testPop1 = new double[][] {
            {-819.0, -917.0, -692.0}, {-786.0, -98.0, -268.0}, {-758.0, -2264.0, -655.0}, {-758.0, -515.0, -226.0},
            {-666.0, -666.0, -666.0}, {-666.0, -666.0, -666.0}, {-636.0, -321.0, -369.0}, {-571.0, -866.0, -524.0},
            {-555.0, -487.0, -980.0}, {-158.0, -517.0, -647.0}, {-43.0, -572.0, -418.0}, {-19.0, -547.0, -935.0},
            {300.0, 300.0, 300.0}, {300.0, 300.0, 300.0}
    };
    private final int[] testPop1Ranks = new int[] {0, 1, 0, 1, 1, 1, 2, 1, 0, 2, 2, 0, 3, 3};
    private final double[] newPoint1 = new double[] {-123, -456, -1};

    private final double[][] testPop2 = new double[][] {
            {1.0, 115.0, 790.0}, {2.0, 385.0, 623.0}, {5.0, 731.0, 719.0}, {6.0, 759.0, 269.0}, {8.0, 550.0, 45.0},
            {17.0, 966.0, 822.0}, {31.0, 931.0, 984.0}, {35.0, 80.0, 480.0}, {37.0, 506.0, 103.0}, {44.0, 129.0, 821.0},
            {46.0, 882.0, 761.0}, {49.0, 265.0, 625.0}, {53.0, 508.0, 482.0}, {62.0, 862.0, 371.0}, {63.0, 73.0, 537.0},
            {65.0, 539.0, 554.0}, {65.0, 704.0, 471.0}, {68.0, 415.0, 283.0}, {69.0, 774.0, 75.0}, {72.0, 296.0, 86.0},
            {77.0, 997.0, 679.0}, {82.0, 454.0, 489.0}, {84.0, 404.0, 284.0}, {84.0, 727.0, 814.0}, {85.0, 103.0, 420.0},
            {86.0, 570.0, 559.0}, {88.0, 558.0, 283.0}, {90.0, 233.0, 618.0}, {90.0, 558.0, 870.0}, {91.0, 690.0, 824.0},
            {91.0, 849.0, 313.0}, {94.0, 209.0, 457.0}, {102.0, 612.0, 219.0}, {114.0, 908.0, 13.0}, {114.0, 955.0, 452.0},
            {118.0, 900.0, 487.0}, {128.0, 819.0, 599.0}, {134.0, 504.0, 168.0}, {142.0, 664.0, 427.0}, {144.0, 66.0, 460.0},
            {148.0, 598.0, 664.0}, {166.0, 348.0, 577.0}, {167.0, 506.0, 438.0}, {167.0, 942.0, 243.0}, {169.0, 31.0, 527.0},
            {169.0, 345.0, 836.0}, {171.0, 504.0, 219.0}, {179.0, 952.0, 35.0}, {182.0, 898.0, 986.0}, {184.0, 308.0, 822.0},
            {187.0, 166.0, 534.0}, {188.0, 799.0, 896.0}, {190.0, 958.0, 875.0}, {193.0, 216.0, 324.0}, {198.0, 901.0, 463.0},
            {201.0, 584.0, 751.0}, {206.0, 597.0, 48.0}, {210.0, 678.0, 836.0}, {213.0, 171.0, 148.0}, {215.0, 416.0, 478.0},
            {218.0, 447.0, 453.0}, {222.0, 401.0, 828.0}, {223.0, 365.0, 530.0}, {225.0, 792.0, 578.0}, {228.0, 374.0, 431.0},
            {235.0, 385.0, 287.0}, {239.0, 509.0, 23.0}, {244.0, 355.0, 878.0}, {266.0, 39.0, 921.0}, {271.0, 507.0, 885.0},
            {271.0, 985.0, 889.0}, {272.0, 974.0, 743.0}, {283.0, 505.0, 183.0}, {283.0, 938.0, 998.0}, {285.0, 466.0, 526.0},
            {294.0, 399.0, 300.0}, {295.0, 965.0, 944.0}, {296.0, 328.0, 41.0}, {307.0, 243.0, 454.0}, {308.0, 201.0, 698.0},
            {309.0, 796.0, 764.0}, {312.0, 108.0, 98.0}, {312.0, 325.0, 101.0}, {325.0, 889.0, 815.0}, {326.0, 512.0, 468.0},
            {327.0, 277.0, 954.0}, {332.0, 835.0, 154.0}, {336.0, 175.0, 877.0}, {338.0, 142.0, 269.0}, {351.0, 569.0, 362.0},
            {359.0, 777.0, 835.0}, {360.0, 67.0, 428.0}, {360.0, 109.0, 715.0}, {361.0, 402.0, 956.0}, {364.0, 26.0, 189.0},
            {367.0, 479.0, 29.0}, {373.0, 416.0, 624.0}, {373.0, 945.0, 970.0}, {375.0, 842.0, 799.0}, {380.0, 847.0, 372.0},
            {386.0, 280.0, 662.0}, {388.0, 252.0, 82.0}, {402.0, 297.0, 425.0}, {404.0, 131.0, 73.0}, {404.0, 135.0, 279.0},
            {406.0, 765.0, 118.0}, {408.0, 320.0, 519.0}, {412.0, 476.0, 621.0}, {412.0, 972.0, 201.0}, {414.0, 783.0, 413.0},
            {423.0, 950.0, 211.0}, {424.0, 858.0, 106.0}, {424.0, 871.0, 520.0}, {425.0, 354.0, 688.0}, {427.0, 250.0, 160.0},
            {439.0, 6.0, 779.0}, {444.0, 591.0, 756.0}, {448.0, 530.0, 945.0}, {448.0, 664.0, 434.0}, {449.0, 80.0, 221.0},
            {458.0, 786.0, 600.0}, {467.0, 743.0, 612.0}, {469.0, 418.0, 603.0}, {478.0, 229.0, 95.0}, {481.0, 5.0, 510.0},
            {484.0, 870.0, 732.0}, {495.0, 220.0, 291.0}, {499.0, 870.0, 44.0}, {505.0, 613.0, 708.0}, {505.0, 750.0, 181.0},
            {507.0, 103.0, 329.0}, {508.0, 457.0, 618.0}, {511.0, 200.0, 476.0}, {511.0, 205.0, 530.0}, {528.0, 80.0, 188.0},
            {528.0, 644.0, 338.0}, {530.0, 436.0, 683.0}, {531.0, 651.0, 98.0}, {535.0, 138.0, 553.0}, {537.0, 418.0, 252.0},
            {541.0, 666.0, 928.0}, {543.0, 133.0, 177.0}, {544.0, 849.0, 242.0}, {545.0, 356.0, 947.0}, {548.0, 784.0, 723.0},
            {550.0, 727.0, 269.0}, {551.0, 370.0, 277.0}, {552.0, 248.0, 952.0}, {553.0, 627.0, 448.0}, {557.0, 796.0, 302.0},
            {560.0, 158.0, 687.0}, {562.0, 409.0, 296.0}, {562.0, 710.0, 101.0}, {565.0, 75.0, 465.0}, {568.0, 23.0, 938.0},
            {568.0, 252.0, 401.0}, {568.0, 523.0, 645.0}, {569.0, 315.0, 177.0}, {572.0, 407.0, 740.0}, {590.0, 115.0, 728.0},
            {593.0, 968.0, 628.0}, {600.0, 859.0, 972.0}, {601.0, 583.0, 763.0}, {602.0, 178.0, 259.0}, {614.0, 857.0, 828.0},
            {615.0, 584.0, 735.0}, {616.0, 511.0, 624.0}, {618.0, 200.0, 390.0}, {623.0, 342.0, 603.0}, {633.0, 593.0, 375.0},
            {635.0, 681.0, 244.0}, {636.0, 122.0, 653.0}, {636.0, 315.0, 744.0}, {641.0, 70.0, 225.0}, {642.0, 374.0, 47.0},
            {644.0, 962.0, 850.0}, {648.0, 865.0, 687.0}, {652.0, 379.0, 288.0}, {654.0, 192.0, 386.0}, {655.0, 39.0, 474.0},
            {655.0, 443.0, 615.0}, {657.0, 523.0, 83.0}, {662.0, 181.0, 488.0}, {666.0, 955.0, 90.0}, {668.0, 259.0, 821.0},
            {672.0, 830.0, 860.0}, {673.0, 782.0, 822.0}, {674.0, 962.0, 248.0}, {676.0, 382.0, 542.0}, {676.0, 808.0, 628.0},
            {676.0, 950.0, 870.0}, {677.0, 532.0, 104.0}, {686.0, 174.0, 740.0}, {687.0, 912.0, 122.0}, {697.0, 472.0, 920.0},
            {697.0, 725.0, 836.0}, {699.0, 774.0, 854.0}, {701.0, 974.0, 447.0}, {702.0, 658.0, 638.0}, {702.0, 809.0, 835.0},
            {704.0, 334.0, 235.0}, {706.0, 417.0, 202.0}, {712.0, 927.0, 754.0}, {713.0, 25.0, 296.0}, {715.0, 593.0, 517.0},
            {720.0, 102.0, 385.0}, {720.0, 433.0, 703.0}, {722.0, 663.0, 843.0}, {728.0, 395.0, 315.0}, {730.0, 188.0, 566.0},
            {731.0, 510.0, 973.0}, {733.0, 859.0, 880.0}, {741.0, 385.0, 381.0}, {743.0, 227.0, 968.0}, {746.0, 33.0, 819.0},
            {746.0, 194.0, 762.0}, {749.0, 224.0, 612.0}, {752.0, 707.0, 981.0}, {756.0, 132.0, 863.0}, {761.0, 315.0, 393.0},
            {767.0, 174.0, 794.0}, {770.0, 757.0, 11.0}, {772.0, 916.0, 261.0}, {778.0, 31.0, 941.0}, {778.0, 841.0, 284.0},
            {785.0, 217.0, 107.0}, {786.0, 393.0, 958.0}, {790.0, 392.0, 922.0}, {794.0, 696.0, 790.0}, {796.0, 657.0, 6.0},
            {798.0, 335.0, 447.0}, {807.0, 852.0, 329.0}, {812.0, 921.0, 60.0}, {821.0, 833.0, 498.0}, {825.0, 451.0, 93.0},
            {827.0, 335.0, 575.0}, {832.0, 615.0, 800.0}, {832.0, 953.0, 304.0}, {835.0, 294.0, 11.0}, {835.0, 556.0, 247.0},
            {838.0, 230.0, 904.0}, {839.0, 563.0, 787.0}, {840.0, 123.0, 418.0}, {841.0, 345.0, 779.0}, {843.0, 28.0, 108.0},
            {843.0, 46.0, 984.0}, {852.0, 17.0, 381.0}, {853.0, 272.0, 226.0}, {853.0, 328.0, 76.0}, {856.0, 132.0, 756.0},
            {856.0, 764.0, 807.0}, {859.0, 416.0, 905.0}, {867.0, 718.0, 37.0}, {869.0, 453.0, 283.0}, {871.0, 254.0, 978.0},
            {876.0, 346.0, 845.0}, {878.0, 478.0, 334.0}, {880.0, 359.0, 80.0}, {881.0, 123.0, 937.0}, {882.0, 197.0, 224.0},
            {884.0, 681.0, 61.0}, {887.0, 461.0, 205.0}, {891.0, 177.0, 7.0}, {894.0, 478.0, 376.0}, {899.0, 290.0, 990.0},
            {902.0, 952.0, 327.0}, {912.0, 444.0, 277.0}, {912.0, 924.0, 841.0}, {913.0, 44.0, 884.0}, {923.0, 565.0, 773.0},
            {925.0, 43.0, 100.0}, {925.0, 357.0, 711.0}, {925.0, 439.0, 260.0}, {929.0, 594.0, 918.0}, {933.0, 107.0, 802.0},
            {934.0, 922.0, 931.0}, {936.0, 748.0, 396.0}, {943.0, 32.0, 927.0}, {953.0, 816.0, 601.0}, {954.0, 236.0, 313.0},
            {955.0, 924.0, 943.0}, {957.0, 562.0, 957.0}, {959.0, 808.0, 318.0}, {960.0, 579.0, 951.0}, {961.0, 555.0, 169.0},
            {962.0, 736.0, 763.0}, {964.0, 204.0, 904.0}, {964.0, 821.0, 755.0}, {966.0, 510.0, 534.0}, {971.0, 509.0, 135.0},
            {982.0, 241.0, 144.0}, {982.0, 393.0, 252.0}, {984.0, 781.0, 697.0}, {987.0, 374.0, 510.0}, {989.0, 323.0, 352.0},
            {994.0, 221.0, 710.0}, {995.0, 334.0, 950.0}, {996.0, 10.0, 70.0}, {996.0, 978.0, 737.0}, {999.0, 587.0, 244.0}
    };

    private final int[] testPop2Ranks = new int[] {0, 0, 1, 0, 0, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 3, 1, 1,
            3, 0, 3, 1, 1, 3, 4, 2, 1, 1, 0, 3, 3, 4, 1, 2, 0, 4, 2, 2, 2, 0, 2, 2, 1, 5, 2, 1, 5, 5, 0, 3, 4, 1, 5, 0,
            2, 2, 3, 2, 4, 1, 1, 0, 3, 1, 4, 6, 5, 2, 6, 3, 2, 6, 0, 1, 2, 5, 0, 1, 6, 3, 3, 2, 2, 1, 3, 5, 0, 1, 4, 0,
            0, 3, 7, 6, 4, 2, 0, 2, 0, 1, 2, 3, 4, 3, 4, 3, 2, 5, 4, 1, 0, 5, 5, 4, 1, 5, 5, 4, 1, 0, 6, 2, 1, 5, 2, 2,
            5, 3, 4, 0, 3, 5, 2, 3, 2, 6, 1, 3, 5, 6, 3, 2, 5, 4, 4, 4, 3, 3, 1, 1, 3, 6, 2, 5, 3, 6, 7, 7, 2, 8, 7, 6,
            3, 5, 4, 3, 3, 5, 1, 1, 9, 7, 3, 3, 1, 6, 2, 3, 3, 5, 8, 8, 4, 5, 7, 9, 3, 5, 4, 7, 8, 9, 5, 7, 9, 3, 3, 8,
            0, 5, 2, 6, 8, 4, 4, 8, 10, 4, 6, 1, 6, 5, 9, 4, 4, 6, 0, 5, 2, 4, 1, 7, 7, 8, 0, 5, 5, 2, 6, 2, 6, 8, 6, 0,
            4, 7, 7, 3, 7, 0, 3, 0, 2, 1, 4, 9, 8, 1, 4, 8, 8, 5, 2, 4, 2, 2, 4, 0, 6, 9, 6, 4, 10, 2, 7, 0, 7, 4, 9, 3,
            11, 7, 1, 8, 3, 12, 9, 5, 9, 4, 8, 7, 9, 7, 3, 2, 4, 8, 6, 4, 5, 8, 0, 9, 5};

    private final double[] newPoint2 = new double[] {-123, -456, -1};


    private void doTest(PPSN2014 sorter, double[][] pop, int[] ranks, double[] addend, int runs, int warmup) {
        double begin = 0;
        for (int cnt = 0; cnt < runs; ++cnt) {
            if (cnt == warmup)
                begin = System.nanoTime();

            final RankedPopulation rp14 = sorter.performIncrementalNds(pop, ranks, addend);
            Assert.assertNotNull(rp14.getPop());
            Assert.assertNotNull(rp14.getRanks());
        }

        System.out.println("time: " + (System.nanoTime() - begin));
    }


    @Ignore
    @Test
    public void testNew1() throws Exception {
        doTest(incrementalPPSN, testPop1, testPop1Ranks, newPoint1, 10000000, 1000000);
    }

    @Ignore
    @Test
    public void testOld1() throws Exception {
        doTest(ppsn2014, testPop1, testPop1Ranks, newPoint1, 10000000, 1000000);
    }

    @Ignore
    @Test
    public void testNew2() throws Exception {
        doTest(incrementalPPSN, testPop2, testPop2Ranks, newPoint2, 40000, 1000);
    }

    @Ignore
    @Test
    public void testOld2() throws Exception {
        doTest(ppsn2014, testPop2, testPop2Ranks, newPoint2, 40000, 1000);
    }
}

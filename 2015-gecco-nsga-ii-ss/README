This is the source code for experiments from papers:

==============================================================================

   Fast Implementation of Steady-State NSGA-II Algorithm for Two Dimensions
              Based on Incremental Non-Dominated Sorting

(accepted to GECCO 2015 Evolutionary Multiobjective Optimization)
==============================================================================

               Various Degrees of Steadiness in NSGA-II
             and Their Influence on the Quality of Results

(accepted to GECCO 2015 Late Breaking Abstracts)
==============================================================================

        Efficient Removal of Points with Smallest Crowding Distance
           in Two-dimensional Incremental Non-dominated Sorting

(accepted to GECCO 2016 workshop on Algorithms and Data Structures)
==============================================================================

Usage:

- ./r.sh paper-nsga
    Runs experiments and builds tables for the "Fast Implementation" paper.

- ./r.sh paper-steadiness
    Runs experiments and builds tables for the "Various Degrees" paper.

- ./r.sh paper-convex-hull
    Runs experiments and builds tables for the "Efficient Removal" paper.

- all other usages are explained in the usage message
  (run r.sh without arguments)

------------------------------------------------------------------------------

Software requirements ([!] - mandatory, [.] - optional):

[!] Java 8        - for running experiments.
[.] Bash          - for r.sh to work. You may use contents of r.sh to compile
                    and run experiments in the way you like if you don't have
                    Bash.
[.] Scala 2.11    - for building LaTeX tables just as in papers.
                    Output is already human-readable, so it is not mandatory.
[.] R             - for evaluating results from "Various Degrees"
                    for statistical significance. 

------------------------------------------------------------------------------

Contents:

- README 
    This file.

- r.sh 
    A Bash shell script to compile sources and run experiments.

- src/Parser.scala
    A Scala source file to parse experiment outputs and build LaTeX tables.

- src/Wilcox.R
    An R script to compute p-values for steadiness paper.

- src/ru/ifmo/steady/ComparisonCounter.java 
    A class used to count the number of objective comparisons during runs.

- src/ru/ifmo/steady/Experiments.java 
    A main file for running experiments.

- src/ru/ifmo/steady/NSGA2.java 
    A generic (storage-independent) NSGA-II implementation with several
    ways to add steadiness.

- src/ru/ifmo/steady/Problem.java 
    An interface for biobjective optimization problems.

- src/ru/ifmo/steady/Solution.java 
    A solution for a biobjective optimization problem.

- src/ru/ifmo/steady/SolutionStorage.java
    An interface for solution storages which support adding one or many
    elements, removing one or many elements (either one by one or as in Deb),
    getting k-th and random elements, iterating over elements.

- src/ru/ifmo/steady/SolutionStorageTests.java 
    Some unit tests for known implementation of solution storages.

- src/ru/ifmo/steady/debNDS/Storage.java
    A solution storage implementation which uses Deb's fast non-dominated sorting.

- src/ru/ifmo/steady/enlu/Storage.java
    A solution storage implementation which uses ENLU as in Deb's tech report.

- src/ru/ifmo/steady/inds/StorageBase.java
    A basic solution storage implementation which uses incremental non-dominated
    sorting (INDS) proposed/analyzed in the papers.

- src/ru/ifmo/steady/inds/Storage.java
    An actual solution storage implementation for INDS.

- src/ru/ifmo/steady/inds/StorageHull.java
    An implementation of INDS-like solution storage with convex hulls
    which speeds up finding the point with the smallest crowding distance
    for the "Efficient Removal" paper.

- src/ru/ifmo/steady/inds/TreapNode.java
    A Cartesian Tree aka Treap implementation used in inds/Storage*.

- src/ru/ifmo/steady/problem/*.java
    Implementations of optimization problems which were used to compare different
    soliution storages and/or ways to introduce steadiness to NSGA-II.

- src/ru/ifmo/steady/util/FastRandom.java
    A CMWC-4096 random number generator implemented in thread-local fashion.
